#
# Copyright (C) 2002-2007 Akira Nukada. All rights reserved.
# Copyright (C) 2002-2007 The SSI Project. All rights reserved. 
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the project nor the names of its contributors 
#       may be used to endorse or promote products derived from this software 
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE SSI PROJECT ``AS IS'' AND ANY EXPRESS 
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE SSI PROJECT BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
AC_INIT(fftss, 3.0)
AM_INIT_AUTOMAKE(fftss, 3.0)
AM_CONFIG_HEADER([include/config.h])

AM_MAINTAINER_MODE

AC_CANONICAL_HOST

AC_ARG_WITH(bg,
	[AC_HELP_STRING([--with-bg],[for IBM BlueGene])],
	[], with_bg=no)

if test x"$with_bg" = xyes; then
	AC_DEFINE([BlueGene],1,[Build for BlueGene])
fi


AC_ARG_WITH(recommended,
	[AC_HELP_STRING([--with-recommended],[use recommended CFLAGS])],
	with_recommended=$withval, with_recommended=no)
if test x"$with_recommended" = xyes; then
	if test x"$with_bg" = xyes; then
		CC=blrts_xlc
        	CFLAGS="-O2 -qarch=440d -qtune=440 -qalias=allptrs -qnounroll"
	else
		case $host in
		ia64-*-*)
			AC_CHECK_PROG(ICC, icc, icc)
			if test x"$ICC" = xicc; then
				CC=icc
				CFLAGS="-O3"
				enable_openmp=yes
			else
				CC=gcc
				CFLAGS=-O3
			fi
			;;
		i686-*-linux*)
			AC_CHECK_PROG(ICC, icc, icc)
			if test x"$ICC" = xicc; then
				CC=icc
#				LD=gcc
				CFLAGS="-O3 -xW -fno-alias"
				enable_openmp=yes
			else
				CC=gcc
				CFLAGS="-O3 -msse2 -msse3"
			fi
		;;
		x86_64-*-*)
			AC_CHECK_PROG(ICC, icc, icc)
			if test x"$ICC" = xicc; then
				CC=icc
				CFLAGS="-O3 -xP -fno-alias"
				enable_openmp=yes
			else
				CC=gcc
				CFLAGS="-O3 -msse2 -msse3"
			fi
			;;
		sparc-*-*)
			CC=cc
			CFLAGS="-xO5 -dalign -xdepend -xchip=ultra3 -xarch=v8plusb"
			enable_openmp=yes
			;;
		powerpc*-*-linux*)
			CC=xlc_r
			LD=gcc
			CFLAGS="-O3 -qtune=auto -qarch=auto"
			enable_openmp=yes
			;;
		powerpc*-*-aix*)
			CC=xlc_r
			CFLAGS="-O3 -qtune=auto -qarch=auto"
			enable_openmp=yes
			;;
		powerpc*-apple-darwin*)
			CC=xlc_r
			CFLAGS="-O3 -qaltivec -qtune=auto -qarch=auto"
			enable_openmp=yes
			AC_DEFINE([USE_ALTIVEC],1,[Use AltiVec Instructions])
			with_asm=no
			;;
		*)
			CC=gcc
			CFLAGS=-O3
			;;
		esac
	fi
fi

# Checks for programs.
AC_PROG_CC
AC_PROG_CC_STDC
AM_PROG_AS

AC_ARG_WITH(asm, [AC_HELP_STRING([--with-asm],[use assembly code])],
	with_asm=$withval, with_asm=yes)

if test x"$with_asm" = x"no"; then
	AC_DEFINE([NO_ASM], 1, [do not use assembly code])
fi
AM_CONDITIONAL(ASM_IA64, test x"$with_asm" = x"yes" -a "$host_cpu" = ia64)
AM_CONDITIONAL(ASM_SPARC, test x"$with_asm" = x"yes" -a "$host_cpu" = sparc)

# Checks for libraries.
AC_CHECK_LIB([m], [cos])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([malloc.h stdlib.h sys/time.h unistd.h complex.h])

AC_ARG_WITH(simd,
	[AC_HELP_STRING([--without-simd],[do not use SIMD instructions])],
	with_simd=$withval, with_simd=yes)

case "$host" in
i386-*-*|i686-*-*|x86_64-*-*)
	AC_MSG_CHECKING([for x86 cpuid instruction])
	AC_TRY_COMPILE([ #include <stdio.h>], [
int op; int *e_x;
  __asm__ ("cpuid"
           : "=a" (e_x[0]),
           "=b" (e_x[1]),
           "=c" (e_x[2]),
           "=d" (e_x[3])
           : "a" (op));
], AC_MSG_RESULT(yes); cpuid=yes,
   AC_MSG_RESULT(no); cpuid=no)
        if test x"$cpuid" = xyes; then
                AC_DEFINE([HAVE_X86_CPUID], 1, [x86 CPUID])
		case $host_cpu in
		i386|i486|i586|i686)
                	AC_DISABLE_SHARED
			;;
		esac
        fi
	AC_CHECK_HEADERS([ia32intrin.h])
	;;
powerpc*-*-*)
	AC_CHECK_HEADERS([altivec.h])
	;;
ia64-*-*)
	AC_CHECK_HEADERS([ia64intrin.h])
	;;
esac

if test x"$with_simd" = xyes; then
	case "$host" in
	i386-*-*|i686-*-*|x86_64-*-*)
		AC_ARG_ENABLE(sse2,
        	[AC_HELP_STRING([--disable-sse2],[do not use SSE2])],
        	enable_sse2=$enableval, enable_sse2=yes)
		if test x"$enable_sse2" = xyes; then
			AC_CHECK_HEADERS([emmintrin.h])
			AC_MSG_CHECKING([for SSE2])
       		 	AC_TRY_COMPILE([
       		 	#include <stdio.h>
       		 	#include <emmintrin.h>],
        		[__m128d a, b;
        		double v[2];
        		a = _mm_set_pd(1.0,2.0);
        		b = _mm_set_pd(3.0,4.0);
        		a = _mm_add_pd(a, b);
        		_mm_storeu_pd(v, a);
       			if (v[0] != 6.0) exit(1);
        		exit(0);], AC_MSG_RESULT(yes), AC_MSG_RESULT(no); enable_sse2=no)
		fi
		if test x"$enable_sse2" = xyes; then
			if test x"$cpuid" = xno; then
                        	AC_MSG_WARN([SSE2 instructions will be used without checking])
			fi
		fi
		if test x"$enable_sse2" = xyes; then
			AC_DEFINE([USE_SSE2], 1, [Use SSE2 instructions])
		fi

		AC_ARG_ENABLE(sse3,
               		[AC_HELP_STRING([--disable-sse3],[do not use SSE3])],
                	enable_sse3=$enableval, enable_sse3=yes)
		if test x"$enable_sse3" = xyes; then
			AC_CHECK_HEADERS([pmmintrin.h])
			AC_MSG_CHECKING([for SSE3])
			AC_TRY_COMPILE([
			#include <stdio.h>
			#include <pmmintrin.h>],
			[__m128d a, b;
			double v[2];
			a = _mm_set_pd(1.0,2.0);
			b = _mm_set_pd(3.0,4.0);
			a = _mm_addsub_pd(a, b);
			_mm_storeu_pd(v, a);
			if (v[0] != -2.0 && v[1] != -2.0) exit(1);
			exit(0);], AC_MSG_RESULT(yes), AC_MSG_RESULT(no); enable_sse3=no)
		fi
                if test x"$enable_sse3" = xyes; then
		if test x"$cpuid" = xno; then
                        AC_MSG_WARN([SSE3 will be used without checking])
                fi
		fi
		if test x"$enable_sse3" = xyes; then
			AC_DEFINE([USE_SSE3], 1, [Use SSE3 instructions])
		fi
		;;
	*)
		enable_sse2=no
		enable_sse3=no
		;;
	esac
fi

AM_CONDITIONAL(SSE2, test x"$enable_sse2" = xyes)
AM_CONDITIONAL(SSE3, test x"$enable_sse3" = xyes)

AC_PROG_LIBTOOL

AC_ARG_ENABLE(openmp, AC_HELP_STRING([--enable-openmp],[use OpenMP]))
if test x"$enable_openmp" = "xyes"; then
	CFLAGS_saved="$CFLAGS"
	OPENMP=
	for ompflag in "" -openmp -qsmp=omp -xopenmp -Popenmp -fopenmp
	do
		CFLAGS="$CFLAGS_saved $ompflag"
		AC_TRY_LINK([#include <omp.h>], [omp_get_wtime();], OPENMP="$ompflag";break, )
	done
	CFLAGS="$CFLAGS_saved $OPENMP"
fi

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_RESTRICT 
AC_C_INLINE
AC_HEADER_TIME

# Checks for library functions.
#AC_FUNC_MALLOC
AC_CHECK_FUNCS([gettimeofday memalign posix_memalign round])

AC_MSG_CHECKING([for complex keywords])
AC_TRY_COMPILE(
[#include<complex.h>], 
[
double d;
double complex z = 1.0 + _Complex_I;
], use_complex=yes, use_complex=no)
AM_CONDITIONAL(COMPLEX, test x"$use_complex" = xyes)
if test x"$use_complex" = xyes; then
	AC_MSG_RESULT(yes)
	AC_DEFINE([USE_COMPLEX], 1, [Use C99 Complex type])
else
	AC_MSG_RESULT(no)
	if test x"$with_bg_compat" = xyes; then
		AC_MSG_WARN([BlueGene compatible mode is disabled])
	fi
	with_bg_compat=no
#	if test x"$with_bg_compat" = xyes; then
#		AC_MSG_ERROR([complex.h is required for BlueGene compatible mode])
#		exit 0
#	fi
fi

if test x"$use_complex" = xyes; then
AC_MSG_CHECKING([for __creal() and __cimag()])
AC_TRY_COMPILE(
[#include <complex.h>],
[
	double d;
	double complex z = 1.0 + _Complex_I;
	d = __creal(z) + __cimag(z);
], internal_creal=yes, internal_creal=no)
if test x"$internal_creal" = xyes; then
	AC_DEFINE([HAVE_INTERNAL_CREAL], 1, [internal __creal()])
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi
fi

# BlueGene PPC440D compatible mode.

with_bg_compat_default=no

case $host_cpu in
powerpc*)
	if test x"$with_bg" = xno; then
        	with_bg_compat_default=yes
	fi
        ;;
esac

AC_ARG_WITH(bg-compat,
        [AC_HELP_STRING([--with-bg-compat],
        [with IBM BlueGene compatible(recommended for PowerPC])
        AC_HELP_STRING([--without-bg-compat],
        [without IBM BlueGene compatible(default)])],
        [], with_bg_compat=$with_bg_compat_default)

if test x"$with_bg_compat" = xyes; then
        AC_DEFINE([BlueGene],1,[Build for BlueGene])
        AC_DEFINE([USE_WRAP440D],1,[Use wrap440.h to emulate PPC440D])
fi
AM_CONDITIONAL(BG, test x"$with_bg" = xyes -o x"$with_bg_compat" = xyes)
AM_CONDITIONAL(ASM_BG, test x"$with_asm" = x"yes" -a x"$with_bg" = xyes -a x"$with_bg_compat" = xno)

AC_ARG_ENABLE(mpi, AC_HELP_STRING([--enable-mpi],[use MPI],,cross_compiling=yes))
if test x"$enable_mpi" = "xyes"; then
	LDFLAGS_saved="$LDFLAGS"
	MPI=none
	for mpiflag in "$MPILIB" -lmpi -lmpich
	do
		LDFLAGS="$LDFLAGS_saved $mpiflag"
		AC_TRY_LINK([#include <mpi.h>], [MPI_Finalize();], MPI="$mpiflag";break, )
	done
	if test x"$MPI" = xnone; then
		echo "no MPI library was found."
		echo "Define MPILIB for your environment."
		exit
	fi

	LDFLAGS="$LDFLAGS $MPI"
	
	AC_TRY_LINK([#include <mpi.h>],[MPI_Win_fence(MPI_MODE_NOPRECEDE,MPI_WIN_NULL);],AC_DEFINE([HAVE_MPI2],1,[Support MPI2 functions]),[])
	
fi
AM_CONDITIONAL(MPI, test x"$enable_mpi" = xyes)

AC_CONFIG_FILES([Makefile include/Makefile libfftss/Makefile libpfftss/Makefile test/Makefile win32/Makefile])
AC_OUTPUT

